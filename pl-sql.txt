--Package to Show letter grades per group ID and exam ID


CREATE OR REPLACE PACKAGE letter_conversion AS
FUNCTION Letter_grade(num_grade IN INTEGER) RETURN NUMBER;
PROCEDURE l_grade(exid INTEGER,gid Varchar2);
END letter_conversion;

CREATE OR REPLACE PACKAGE BODY letter_conversion AS
FUNCTION Letter_grade(num_grade IN INTEGER)
Return char
IS
letter Char;
BEGIN
CASE 
WHEN num_grade BETWEEN 0 AND 59 THEN letter:='F';
WHEN num_grade BETWEEN 60 AND 69 THEN letter:='D';
WHEN num_grade BETWEEN 70 AND 79 THEN letter:='C';
WHEN num_grade BETWEEN 80 AND 89 THEN letter:='B';
WHEN num_grade BETWEEN 90 AND 100 THEN letter:='A';
END CASE;
RETURN(letter);
END Letter_grade;

PROCEDURE l_grade(exid INTEGER,gid Varchar2)
IS
CURSOR student_lgrade IS
SELECT student.Student_ID,student_name,Num_Grade
FROM student,Grade
WHERE Grade.EXAM_ID=exid AND student.group_ID=gid AND student.student_ID=grade.student_ID;
idstudent student.student_ID%type;
ngrade grade.Num_Grade%type;
sname student.student_name%type;
lgrade CHAR;
BEGIN
open student_lgrade;
LOOP
FETCH student_lgrade INTO idstudent,sname,ngrade;
EXIT WHEN student_lgrade%notfound;
lgrade:= Letter_grade(ngrade);
dbms_output.put_line('Student ID '||idstudent||' student name '||sname||' Exam_ID '||exid||' Numerical grade '||ngrade||' letter grade '||lgrade);
END LOOP;
END l_grade;
END letter_conversion;

--Students with best grade given a specific group number & exam ID

CREATE OR REPLACE Procedure Best_students(Examid exam.exam_ID%type,gid student.group_ID%type)
IS
CURSOR best_st IS SELECT student.student_id,student_name,age,email,num_grade from grade,student where (num_grade=(select max(num_grade) 
from grade,student where exam_id=Examid AND student.group_id=gid AND student.student_ID=grade.student_ID)) AND student.student_ID=grade.student_ID; 
ID student.student_id%type;
Name student.student_name%type;
Age student.Age%type;
Email student.email%type;
ngrade grade.num_grade%type;
BEGIN
open best_st;
LOOP
fetch best_st into id,name,age,email,ngrade;
EXIT WHEN best_st%notfound;
dbms_output.put_line('Student with id '||id||' name '||name||' age '||age||' email address '||email||' has best score of '||ngrade );
END LOOP;
END Best_students;

SET SERVEROUTPUT ON;
EXECUTE Best_students(6,'jun4');

-- different departments trigger
CREATE OR REPLACE TRIGGER department
BEFORE INSERT OR UPDATE ON assignation
FOR EACH ROW
DECLARE department1 invigilator.dep%type;
        department2 invigilator.dep%type;
BEGIN
SELECT invigilator.dep into department1 from invigilator where prof_id=:NEW.invigilator_ID;
SELECT examinator.dep into department2 from examinator where prof_id=:NEW.examinator_ID;
if (department1=department2)
THEN
RAISE_APPLICATION_ERROR(-20502,'Invigilators and examinators should be from different departments');
END IF;
END department;

insert into assignation values (1,'jun4',197300,145167,'Lab 5');


--groups limit trigger
CREATE OR REPLACE TRIGGER num_groups
BEFORE INSERT OR UPDATE ON assignation
FOR EACH ROW
DECLARE
ngroups INTEGER;
--Select num_seats from Class where class.Class_ID=:NEW.Class_ID
BEGIN
SELECT count(group_ID) into ngroups from assignation where Class_ID=:NEW.Class_ID group by Class_ID;
IF (ngroups=2)
THEN
IF INSERTING THEN
RAISE_APPLICATION_ERROR(-20502,'You cannot insert more than 2 groups');
ELSIF UPDATING THEN
RAISE_APPLICATION_ERROR(-20500,'You cannot update Class_group table,the classroom already has two groups');
END IF;
END if;
END;

insert into assignation values (6,'jun3',197300,104536,'Amphi 4');


-- number of seats limit trigger

CREATE OR REPLACE TRIGGER num_seats 
BEFORE INSERT OR UPDATE ON assignation
FOR EACH ROW
DECLARE
gid VARCHAR2(30);
somme INTEGER;
seats integer;
nstudents integer;
CURSOR search_groups IS SELECT assignation.group_ID,num_students from assignation,StudentsGroup where Class_ID=:NEW.Class_ID AND exam_ID=:NEW.exam_ID AND Assignation.group_ID=StudentsGroup.group_ID;
BEGIN
somme:=0;
OPEN search_groups;
LOOP
fetch search_groups into gid,nstudents;
EXIT when search_groups%notfound;
somme:=somme+nstudents;
END LOOP;
Select num_seats into seats from class where class_ID=:NEW.Class_ID;
if somme>=seats then 
RAISE_APPLICATION_ERROR(-20502,'Classroom has already reached its limits');
END IF;
END num_seats;

insert into assignation values (6,'jun3',197300,128646,'Amphi 4');
